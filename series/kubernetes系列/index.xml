<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>kubernetes系列 on IBORA</title><link>https://ibora.evcoder.com/series/kubernetes%E7%B3%BB%E5%88%97/</link><description>Recent content in kubernetes系列 on IBORA</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>ender.viggin.coder@gmail.com (ender viggin)</managingEditor><webMaster>ender.viggin.coder@gmail.com (ender viggin)</webMaster><copyright>©2022, All Rights Reserved</copyright><lastBuildDate>Wed, 16 Feb 2022 10:22:02 +0800</lastBuildDate><atom:link href="https://ibora.evcoder.com/series/kubernetes%E7%B3%BB%E5%88%97/index.xml" rel="self" type="application/rss+xml"/><item><title>kubernetes架构</title><link>https://ibora.evcoder.com/posts/kuberneteskubernetes%E6%9E%B6%E6%9E%84/</link><pubDate>Wed, 16 Feb 2022 10:22:02 +0800</pubDate><author>ender.viggin.coder@gmail.com (ender viggin)</author><atom:modified>Wed, 16 Feb 2022 10:22:02 +0800</atom:modified><guid>https://ibora.evcoder.com/posts/kuberneteskubernetes%E6%9E%B6%E6%9E%84/</guid><description>架构 Kubernetes 遵循非常传统的客户端服务端架构，客户端通过 RESTful 接口或者直接使用 kubectl 与Kubernetes 集群进行通信。每一个 Kubernetes 集群都由一组 Master 节点和一系列的Node节点组成，其中 Master 节点主要负责存储集群的状态并为 Kubernetes 对象分配和调度资源。
Master服务端也被称为主控节点。
主要任务： 负责管理所有节点。 负责调度Pod到哪些节点上运行。 负责控制集群运行过程中的所有状态。 主要组件 kube-apiserver组件：集群的HTTP REST API接口，是集群控制的入口。 kube-controller-manager组件：集群中所有资源对象的自动化控制中心。 kube-scheduler组件：集群中Pod资源对象的调度服务。 Node客户端也被称为工作节点。
主要任务 负责管理所有容器。 负责监控/上报所有Pod的运行状态。 主要组件 kubelet组件：负责管理节点上容器的创建、删除、启停等任务，与Master节点进行通信。 kube-proxy组件：负责Kubernetes服务的通信及负载均衡服务。 container组件：负责容器的基础管理服务，接收kubelet组件的指令。 组件简述 kubectl kubectl是Kubernetes官方提供的命令行工具，用户可以通过kubectl以命令行交互的方式对Kubernetes API Server进行操作，通信协议使用HTTP/JSON。
kubectl发送相应的HTTP请求，请求由Kubernetes API Server接收、处理并将结果反馈给kubectl。kubectl接收到响应并展示结果。至此，kubectl与kube-apiserver的一次请求周期结束。
kube-apiserver kube-apiserver组件，也被称为Kubernetes API Server。它负责将Kubernetes“资源组/资源版本/资源”以RESTful风格的形式对外暴露并提供服务。Kubernetes集群中的所有组件都通过kube-apiserver组件操作资源对象。kube-apiserver组件也是集群中唯一与etcd集群进行交互的核心组件。
etcd集群是分布式键值存储集群，其提供了可靠的强一致性服务发现。etcd集群存储Kubernetes系统集群的状态和元数据，其中包括所有Kubernetes资源对象信息、集群节点信息等。Kubernetes将所有数据存储至etcd集群中前缀为/registry的目录下。
kube-apiserver属于核心组件，具有以下重要特性：
将Kubernetes系统中的所有资源对象都封装成RESTful风格的API接口进行管理。 可进行集群状态管理和数据管理，是唯一与Etcd集群交互的组件。 拥有丰富的集群安全访问机制，以及认证、授权及准入控制器。 提供了集群各组件的通信和交互功能。 kube-controller-manager kube-controller-manager组件，也被称为Controller Manager（管理控制器），它负责管理Kubernetes集群中的节点、Pod副本、服务、端点、命名空间、服务账户、资源定额等。</description><dc:creator>ender viggin</dc:creator><media:content url="https://ibora.evcoder.comhttps://image.evcoder.com/image/hugo/blog/kubernetes-96.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kubernetes</category><category>kubernetes系列</category></item><item><title>minikube安装kubernetes集群</title><link>https://ibora.evcoder.com/posts/kubernetesminikube%E5%AE%89%E8%A3%85kubernetes%E9%9B%86%E7%BE%A4/</link><pubDate>Fri, 11 Feb 2022 11:04:12 +0800</pubDate><author>ender.viggin.coder@gmail.com (ender viggin)</author><atom:modified>Fri, 11 Feb 2022 11:04:12 +0800</atom:modified><guid>https://ibora.evcoder.com/posts/kubernetesminikube%E5%AE%89%E8%A3%85kubernetes%E9%9B%86%E7%BE%A4/</guid><description>minikube文档： https://minikube.sigs.k8s.io/docs/
minikube简介 Minikube 可以实现⼀种轻量级的 Kubernetes 集群，通过在本地计算机上创建虚拟机并部署只包含单个节点的简单集群。
minikube安装 1.下载minikube osx linux 1 brew install minikube 1 2 curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube 'use strict'; var containerId = JSON.parse("\"985602ef96012068\""); var containerElem = document.getElementById(containerId); var codetabLinks = null; var codetabContents = null; var ids = []; if (containerElem) { codetabLinks = containerElem.querySelectorAll('.codetab__link'); codetabContents = containerElem.querySelectorAll('.codetab__content'); } for (var i = 0; i 0) { codetabContents[0].</description><dc:creator>ender viggin</dc:creator><media:content url="https://ibora.evcoder.comhttps://image.evcoder.com/image/hugo/blog/kubernetes-96.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>minikube</category><category>kubernetes</category><category>kubernetes系列</category></item><item><title>kubectl命令详解</title><link>https://ibora.evcoder.com/posts/kuberneteskubectl%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link><pubDate>Thu, 10 Feb 2022 13:47:24 +0800</pubDate><author>ender.viggin.coder@gmail.com (ender viggin)</author><atom:modified>Thu, 10 Feb 2022 13:47:24 +0800</atom:modified><guid>https://ibora.evcoder.com/posts/kuberneteskubectl%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid><description>kubectl简介 kubectl是一个用于操作kubernetes集群的命令行工具。
kubectl安装配置 osx linux 1 2 3 4 brew install kubectl # 或者 curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl sudo mv kubectl /user/bin/kubectl &amp;amp;&amp;amp; chmod +x /usr/bin/kubectl 1 2 3 4 5 6 7 8 9 10 11 12 # 如果需要安装其他版本,用指定版本号替换该命令的这一部分： $(curl -L -s https://dl.k8s.io/release/stable.txt) curl -LO &amp;#34;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&amp;#34; # kubectl 校验 curl -LO &amp;#34;https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256&amp;#34; echo &amp;#34;$(&amp;lt;kubectl.sha256)kubectl&amp;#34; | sha256sum --check # 安装kubectl sudo mv kubectl /user/bin/kubectl &amp;amp;&amp;amp; chmod +x /usr/bin/kubectl # 自动补全功能 echo &amp;#39;source &amp;lt;(kubectl completion bash)&amp;#39; &amp;gt;&amp;gt;~/.</description><dc:creator>ender viggin</dc:creator><media:content url="https://ibora.evcoder.comhttps://image.evcoder.com/image/hugo/blog/kubernetes-96.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>kubectl</category><category>kubernetes</category><category>kubernetes系列</category></item><item><title>kubernetes系列文章</title><link>https://ibora.evcoder.com/posts/%E7%B3%BB%E5%88%97kubernetes%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</link><pubDate>Tue, 08 Feb 2022 15:46:39 +0800</pubDate><author>ender.viggin.coder@gmail.com (ender viggin)</author><atom:modified>Tue, 08 Feb 2022 15:46:39 +0800</atom:modified><guid>https://ibora.evcoder.com/posts/%E7%B3%BB%E5%88%97kubernetes%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</guid><description>kubernetes简介 Kubernetes 是一个可移植的、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。 Kubernetes 拥有一个庞大且快速增长的生态系统。Kubernetes 的服务、支持和工具广泛可用。该项目托管在CNCF。
Kubernetes 这个名字源于希腊语，意为“舵手”或“飞行员”。k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。 Google 在 2014 年开源了 Kubernetes 项目。是 Google 多年大规模容器管理技术 Borg 的开源版本，结合了社区中最好的想法和实践。
kubernetes功能：
服务发现和负载均衡
Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大， Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。
存储编排
Kubernetes 允许你自动挂载你选择的存储系统，例如本地存储、公共云提供商等。
自动部署和回滚
你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态 更改为期望状态。例如，你可以自动化 Kubernetes 来为你的部署创建新容器， 删除现有容器并将它们的所有资源用于新容器。
自动完成装箱计算
Kubernetes 允许你指定每个容器所需 CPU 和内存（RAM）。 当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。
自我修复
Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的 运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。
密钥与配置管理
Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。 你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</description><dc:creator>ender viggin</dc:creator><media:content url="https://ibora.evcoder.comhttps://image.evcoder.com/image/hugo/blog/kubernetes-96.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>系列</category><category>Kubernetes</category><category>kubernetes系列</category></item></channel></rss>