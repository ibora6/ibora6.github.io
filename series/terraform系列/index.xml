<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>terraform系列 on IBORA</title><link>https://ibora.evcoder.com/series/terraform%E7%B3%BB%E5%88%97/</link><description>Recent content in terraform系列 on IBORA</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>ender.viggin.coder@gmail.com (ender viggin)</managingEditor><webMaster>ender.viggin.coder@gmail.com (ender viggin)</webMaster><copyright>©2022, All Rights Reserved</copyright><lastBuildDate>Fri, 18 Feb 2022 14:33:02 +0800</lastBuildDate><atom:link href="https://ibora.evcoder.com/series/terraform%E7%B3%BB%E5%88%97/index.xml" rel="self" type="application/rss+xml"/><item><title>terraform语法详解</title><link>https://ibora.evcoder.com/posts/terraformterraform%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</link><pubDate>Fri, 18 Feb 2022 14:33:02 +0800</pubDate><author>ender.viggin.coder@gmail.com (ender viggin)</author><atom:modified>Fri, 18 Feb 2022 14:33:02 +0800</atom:modified><guid>https://ibora.evcoder.com/posts/terraformterraform%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid><description>Terraform的配置语言为HCL（HashiCorp Configuration Language），它是HashiCorp发明的一种声明式语言，能够以更加简短和人性化的方式来描述资源。</description><dc:creator>ender viggin</dc:creator><media:content url="https://ibora.evcoder.comhttps://image.evcoder.com/image/hugo/blog/terraform-96.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>系列</category><category>terraform系列</category></item><item><title>terraform命令行详解</title><link>https://ibora.evcoder.com/posts/terraformterraform%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%A6%E8%A7%A3/</link><pubDate>Fri, 18 Feb 2022 12:12:24 +0800</pubDate><author>ender.viggin.coder@gmail.com (ender viggin)</author><atom:modified>Fri, 18 Feb 2022 12:12:24 +0800</atom:modified><guid>https://ibora.evcoder.com/posts/terraformterraform%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%A6%E8%A7%A3/</guid><description>资源管理常用命令 Terraform 对资源的管理主要是对资源生命周期的管理，即通过命令实现对Terraform模板中所定义资源的创建，修改，查看和删除。
terraform plan: 资源预览 plan 命令用于对模板中所定义资源的预览，主要用于以下几个场景：
预览当前模板中定义的资源是否符合管理预期 如果当前模板已经存在对应的state文件，那么 plan 命令将会展示模板定义与state文件内容的diff结果，如果有变更，将会展示结果并在下方显示出来 对DataSource而言，执行 plan 命令，即可直接获取并输出所要查询的资源及其属性 1 terraform plan terraform apply：资源新建和变更 apply 命令用于实际资源的新建和变更操作，为了安全起见，在命令运行过程中增加了人工交互的过程，即需要手动确认是否继续，当然也可以通过 --auto-approve 参数来跳过人工确认的过程。
apply 命令适用于以下几种场景：
创建新的资源 通过修改模板参数来修改资源的属性 如果从当前模板中删除某个资源的定义， apply 命令会将该资源彻底删除。可以理解为“资源的移除也是一种变更” terraform show：资源的展示 show 命令用于展示当前state中所有被管理的资源及其所有属性值。
terraform destroy：资源释放 destroy 命令用于对资源的释放操作，为了安全起见，在命令执行过程中，也增加了人工交互的过程，如果想要跳过手动确认操作，可以通过 --force 参数来跳过。
terraform destroy 默认会释放当前模板中定义的所有资源，如果只想释放其中某个特定的资源，可以通过参数 -target=&amp;lt;资源类型&amp;gt;.&amp;lt;资源名称&amp;gt; 来指定。
1.5 terraform import：资源导入 import 命令用于将存量的云资源导入到terraform state中，进而加入到Terraform的管理体系中，适用的场景包含但不限于以下几种：
从来没有使用Terraform管控过任何资源，当前所有的存量云资源都是通过控制台，CLI，ROS或者直接调用API创建和管理的，现在想要切换为Terraform管理 在不影响资源正常使用的前提下，重构资源模板中的资源定义 terraform taint: 标记资源为“被污染” taint 命令用于把某个资源标记为“被污染”状态，当再次执行 apply 命令时，这个被污染的资源将会被先释放，然后再创建一个新的，相当于对这个特定资源做了先删除后新建的操作。</description><dc:creator>ender viggin</dc:creator><media:content url="https://ibora.evcoder.comhttps://image.evcoder.com/image/hugo/blog/terraform-96.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>系列</category><category>terraform系列</category></item><item><title>terraform系列文章</title><link>https://ibora.evcoder.com/posts/%E7%B3%BB%E5%88%97terraform%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</link><pubDate>Wed, 09 Feb 2022 12:21:44 +0800</pubDate><author>ender.viggin.coder@gmail.com (ender viggin)</author><atom:modified>Wed, 09 Feb 2022 12:21:44 +0800</atom:modified><guid>https://ibora.evcoder.com/posts/%E7%B3%BB%E5%88%97terraform%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</guid><description>terraform简介 Terraform 是一种安全有效地构建、更改和版本控制基础设施的工具(基础架构自动化的编排工具)。它的目标是 &amp;ldquo;Write, Plan, and create Infrastructure as Code&amp;rdquo;, 基础架构即代码。Terraform 几乎可以支持所有市面上能见到的云服务。具体的说就是可以用代码来管理维护 IT 资源，把之前需要手动操作的一部分任务通过程序来自动化的完成，这样的做的结果非常明显：高效、不易出错。
Terraform 提供了对资源和提供者的灵活抽象。该模型允许表示从物理硬件、虚拟机和容器到电子邮件和 DNS 提供者的所有内容。由于这种灵活性，Terraform 可以用来解决许多不同的问题。这意味着有许多现有的工具与Terraform 的功能重叠。但是需要注意的是，Terraform 与其他系统并不相互排斥。它可以用于管理小到单个应用程序或达到整个数据中心的不同对象。
Terraform 使用配置文件描述管理的组件(小到单个应用程序，达到整个数据中心)。Terraform 生成一个执行计划，描述它将做什么来达到所需的状态，然后执行它来构建所描述的基础结构。随着配置的变化，Terraform 能够确定发生了什么变化，并创建可应用的增量执行计划。
terraform核心功能 基础架构即代码(Infrastructure as Code)
使用高级配置语法来描述基础架构，这样就可以对数据中心的蓝图进行版本控制，就像对待其他代码一样对待它。
执行计划(Execution Plans)
Terraform 有一个 plan 步骤，它生成一个执行计划。执行计划显示了当执行 apply 命令时 Terraform 将做什么。通过 plan 进行提前检查，可以使 Terraform 操作真正的基础结构时避免意外。
资源图(Resource Graph)
Terraform 构建的所有资源的图表，它能够并行地创建和修改任何没有相互依赖的资源。因此，Terraform 可以高效地构建基础设施，操作人员也可以通过图表深入地解其基础设施中的依赖关系。
自动化变更(Change Automation)
把复杂的变更集应用到基础设施中，而无需人工交互。通过前面提到的执行计划和资源图，我们可以确切地知道 Terraform 将会改变什么，以什么顺序改变，从而避免许多可能的人为错误。
terrform系列博客列表 terraform安装 terraform概念详解 terraform语法详解 terraform命令行详解</description><dc:creator>ender viggin</dc:creator><media:content url="https://ibora.evcoder.comhttps://image.evcoder.com/image/hugo/blog/terraform-96.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>系列</category><category>terraform系列</category></item></channel></rss>