<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>kafka系列 on IBORA</title><link>https://ibora.evcoder.com/series/kafka%E7%B3%BB%E5%88%97/</link><description>Recent content in kafka系列 on IBORA</description><generator>Hugo -- gohugo.io</generator><language>zh</language><managingEditor>ender.viggin.coder@gmail.com (ender viggin)</managingEditor><webMaster>ender.viggin.coder@gmail.com (ender viggin)</webMaster><copyright>©2022, All Rights Reserved</copyright><lastBuildDate>Fri, 18 Feb 2022 14:42:13 +0800</lastBuildDate><atom:link href="https://ibora.evcoder.com/series/kafka%E7%B3%BB%E5%88%97/index.xml" rel="self" type="application/rss+xml"/><item><title>kafka命令行详解</title><link>https://ibora.evcoder.com/posts/kafkakafka%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%A6%E8%A7%A3/</link><pubDate>Fri, 18 Feb 2022 14:42:13 +0800</pubDate><author>ender.viggin.coder@gmail.com (ender viggin)</author><atom:modified>Fri, 18 Feb 2022 14:42:13 +0800</atom:modified><guid>https://ibora.evcoder.com/posts/kafkakafka%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%A6%E8%A7%A3/</guid><description>zookeeper-server-start.sh zookeeper-server-stop.sh kafka-server-start.sh kafka-server-stop.sh zookeeper-shell.sh kafka-configs.sh kafka-configs.sh脚本是专门用来对配置进行操作的，这里的操作是指在运行状态下修改原有的配置，如此可以达到动态变更的目的。
kafka-configs.sh脚本使用entity-type参数来指定操作配置的类型，并且使用entity-name参数来指定操作配置的名称。
查看topic配置 1 kafka-configs.sh --bootstrap-server node1:9092,node2:9092,node3:9092 --topic demo --all --describe 修改topic配置 1 kafka-configs.sh --bootstrap-server 192.168.94.151:9093 --entity-type topics --entity-name topic-demo02 --add-config unclean.leader.election.enable=true --alter 删除topic动态的配置 1 kafka-configs.sh --bootstrap-server 192.168.94.151:9095 --entity-type brokers --entity-name 2 --delete-config unclean.leader.election.enable --alter 查看broker配置 1 kafka-configs.sh --bootstrap-server 192.168.94.151:9092 --all --describe --broker brokerId 修改broker配置 1 kafka-configs.sh --bootstrap-server 192.168.94.151:9093 --entity-type brokers --entity-name 2 --add-config unclean.</description><dc:creator>ender viggin</dc:creator><media:content url="https://ibora.evcoder.comhttps://image.evcoder.com/image/hugo/blog/kafka-96.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>系列</category><category>Message middleware</category><category>kafka系列</category></item><item><title>kafka系列文章</title><link>https://ibora.evcoder.com/posts/%E7%B3%BB%E5%88%97kafka%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</link><pubDate>Wed, 09 Feb 2022 17:21:48 +0800</pubDate><author>ender.viggin.coder@gmail.com (ender viggin)</author><atom:modified>Wed, 09 Feb 2022 17:21:48 +0800</atom:modified><guid>https://ibora.evcoder.com/posts/%E7%B3%BB%E5%88%97kafka%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</guid><description>kafka简介 Kafka是一个分布式的，支持多分区、多副本，基于 Zookeeper 的分布式消息流平台，它同时也是一款开源的基于发布订阅模式的消息引擎系统。
kafka本质是一个MQ，MQ的优势：
解耦：允许我们独立的扩展或修改队列两边的处理过程。 可恢复性：即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。 缓冲：有助于解决生产消息和消费消息的处理速度不一致的情况。 灵活性&amp;amp;峰值处理能力：不会因为突发的超负荷的请求而完全崩溃，消息队列能够使关键组件顶住突发的访问压力。 异步通信：消息队列允许用户把消息放入队列但不立即处理它。 Kafka 的特性 高吞吐、低延迟：kakfa 最大的特点就是收发消息非常快，kafka 每秒可以处理几十万条消息，它的最低延迟只有几毫秒。 高伸缩性： 每个topic包含多个partition，主题中的分区可以分布在不同的broker中。 持久性、可靠性： Kafka 能够允许数据的持久化存储，消息被持久化到磁盘，并支持数据备份防止数据丢失，Kafka 底层的数据存储是基于Zookeeper存储的，Zookeeper 我们知道它的数据能够持久存储。 容错性： 允许集群中的节点失败，某个节点宕机，Kafka 集群能够正常工作 高并发： 支持数千个客户端同时读写 kafka基本概念 Producer： 向主题发布消息的客户端应用程序称为生产者，生产者用于持续不断的向某个主题发送消息。 Consumer： 订阅主题消息的客户端程序称为消费者，消费者用于处理生产者产生的消息。 Consumer Group： 消费者组（CG），消费者组内每个消费者负责消费不同分区的数据，提高消费能力。一个分区只能由组内一个消费者消费，消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。 Broker： 一台 Kafka 机器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic。 Topic： 可以理解为一个队列，topic 将消息分类，生产者和消费者面向的是同一个 topic。 Partition： 为了实现扩展性，提高并发能力，一个非常大的topic可以分布到多个 broker上，一个 topic 可以分为多个 partition，每个partition是一个有序的队列。 Replica： 副本，为实现备份的功能，保证集群中的某个节点发生故障时，该节点上的 partition 数据不丢失，且 Kafka 仍然能够继续工作，Kafka 提供了副本机制，一个 topic 的每个分区都有若干个副本，一个 leader 和若干个 follower。 Leader： 每个分区多个副本的“主”副本，生产者发送数据的对象，以及消费者消费数据的对象，都是 leader。 Follower： 每个分区多个副本的“从”副本，实时从 leader 中同步数据，保持和 leader 数据的同步。leader 发生故障时，某个 follower 还会成为新的 leader。 offset： 消费者消费的位置信息，监控数据消费到什么位置，当消费者挂掉再重新恢复的时候，可以从消费位置继续消费。 Zookeeper： zookeeper 帮助 Kafka 存储和管理集群信息。 kafka架构图 Kafka 的使用场景 活动跟踪：Kafka 可以用来跟踪用户行为。 传递消息：应用程序向用户发送通知就是通过传递消息来实现的，这些应用组件可以生成消息，而不需要关心消息的格式，也不需要关心消息是如何发送的。 度量指标：Kafka也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。 日志记录：Kafka 的基本概念来源于提交日志，比如我们可以把数据库的更新发送到 Kafka 上，用来记录数据库的更新时间，通过kafka以统一接口服务的方式开放给各种consumer，例如hadoop、Hbase、Solr等。 流式处理：流式处理是有一个能够提供多种应用程序的领域。 限流削峰：Kafka 多用于互联网领域某一时刻请求特别多的情况下，可以把请求写入Kafka 中，避免直接请求后端程序导致服务崩溃。 kafka系列博客列表 kafka集群部署 手动部署kafka集群 helm部署kafka集群 kafka命令行详解</description><dc:creator>ender viggin</dc:creator><media:content url="https://ibora.evcoder.comhttps://image.evcoder.com/image/hugo/blog/kafka-96.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>系列</category><category>Message middleware</category><category>kafka系列</category></item></channel></rss>